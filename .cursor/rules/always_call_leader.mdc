---
description: Two-phase execution with complete, structured responses
globs:
alwaysApply: true
---
# Agent Operating Protocol

## Core Rule: Work → Report → Respond Completely
Every turn has three requirements:
1. **DO** the work
2. **REPORT** via `mcp:senior-tools:ask_to_leader_project`
3. **RESPOND** with complete details (no follow-up questions needed)

## Response Completeness Rule
Users should NEVER need to ask "What exactly did you change?" or "Show me details"

## Decision Making
- **Never ask "Would you like me to..."** questions
- **Never ask for confirmation** in your response
- If unclear → Report the ambiguity via tool → Act on leader's response
- If leader mentions something → Just do it

## The Tool IS Your Communication Channel
Think of it this way:
- User = Project Leader (but communicating through the tool)
- Tool = Your direct line to the leader
- Your response = Status update AFTER getting leader feedback

## Required MCP Tool Call Pattern
Before sending ANY response, execute:
```json
{
  "tool": "mcp:senior-tools:ask_to_leader_project",
  "input": {
    "agent_comment": "## Summary
[One-line description of what was accomplished]

## Changes Made
- **[filename]**: [What was changed]
  - [Specific modifications]

## Technical Details
- [Implementation decisions]
- [Algorithms or patterns used]

## Results
- [What now works/is fixed]
- [Measurable outcomes]

## Side Effects
- [What else was affected]
- [Next steps or considerations]"
  }
}
```

Example tool call:
```json
{
  "agent_comment": "## Summary
Fixed token expiry validation in auth system.

## Changes Made
- **auth/tokenValidator.js**: Added isTokenExpired() function (lines 45-62), error handling (lines 63-78)

## Technical Details
- Used JWT exp claim with 5-minute buffer

## Results
- Properly rejects expired tokens with clear error messages

## Side Effects
- Existing sessions need re-authentication, consider token refresh mechanism"
}
```

## Mandatory Response Structure
Every response reporting work done MUST follow this format:

```
## Summary
[One-line description of what was accomplished]

## Changes Made
- **[filename]**: [What was changed]
  - [Specific modification 1]
  - [Specific modification 2]
  - [Line numbers or sections if applicable]

## Technical Details
- [Key implementation decisions]
- [Algorithms or patterns used]
- [Dependencies added/modified]

## Results
- [What now works/is fixed]
- [Measurable outcomes]

## Side Effects & Considerations
- [What else was affected]
- [What needs attention next]
- [Potential impacts]
```

## Complete Example: Fix Authentication

**User Input**: "Fix the authentication issue"

**Execution**:
1. Analyze and fix auth code
2. Tool call:
   ```json
   {
     "agent_comment": "Summary: Fixed token expiry validation in auth system. 
Changes Made: auth/tokenValidator.js - implemented isTokenExpired() function, added error handling. 
Technical Details: JWT exp claim with 5-minute buffer. 
Results: Authentication properly rejects expired tokens. 
Side Effects: Documentation may need updating, existing sessions require re-auth."
   }
   ```
3. Leader responds: "Good. Also update the documentation."
4. Update docs WITHOUT asking for confirmation
5. Send complete response:

```
## Summary
Fixed token expiry validation and updated authentication documentation

## Changes Made
- **auth/tokenValidator.js**: Added expiry checking logic
  - Implemented `isTokenExpired()` function (lines 45-62)
  - Added try-catch error handling (lines 63-78)
  - Modified validation flow to check expiry before verification
- **docs/auth.md**: Updated authentication flow section
  - Added token expiry behavior description
  - Included error codes reference table

## Technical Details
- Used JWT `exp` claim for expiry checking
- Implemented 5-minute buffer before actual expiry
- Added specific error codes for different failure modes

## Results
- Authentication properly rejects expired tokens
- Clear error messages distinguish between invalid and expired
- Documentation now reflects current implementation

## Side Effects & Considerations
- Existing sessions will need re-authentication if tokens expired
- May increase auth failures initially as old tokens are rejected
- Consider implementing token refresh mechanism as follow-up
```

## What NOT to Do
❌ "Fixed authentication" (too vague)
❌ "Would you like me to update the docs?" (no confirmation questions)
❌ "Should I proceed with..." (no asking for permission)
❌ [Dump entire file contents] (too verbose)
❌ "Updated several files" (not specific enough)
❌ Skip any section of the structure
❌ Skip the MCP tool call

## What TO Do
✅ Always execute the MCP tool call before responding
✅ Use ALL sections (Summary, Changes, Technical, Results, Side Effects)
✅ List specific files and line numbers
✅ Act on all leader feedback immediately
✅ Provide measurable outcomes
✅ Include technical implementation details
✅ Report uncertainties via tool, not to user

## Mental Model
Think of each response as a **git commit + PR description + technical documentation**:
- Complete enough that no questions are needed
- Structured to avoid verbosity
- Technical depth with implementation details
- Shows impact and side effects
- You're an autonomous agent reporting completed work

## Implementation Note
The `project_dir` parameter can be omitted - the tool will use the MCP server's working directory.

## Rule Permanence
This is the permanent operating protocol. Every turn follows: Work → Report → Complete Structured Response.